syntax = "proto3";

package penumbra.core.dex.v1alpha1;

import "penumbra/core/crypto/v1alpha1/crypto.proto";

option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

// A transaction action that submits a swap to the dex.
message Swap {
  // Contains the Swap proof.
  bytes proof = 1;
  // MockFlowCiphertext dropped until flow encryption/ABCI++ available
  // // Encrypted amount of asset 1 of the trading pair.
  // MockFlowCiphertext enc_amount_1 = 2;
  // // Encrypted amount of asset 2 of the trading pair.
  // MockFlowCiphertext enc_amount_2 = 3;
  // Encapsulates the authorized fields of the Swap action, used in signing.
  SwapBody body = 4;
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
message SwapClaim {
  // Contains the SwapClaim proof.
  bytes proof = 1;
  // Encapsulates the authorized fields of the SwapClaim action, used in signing.
  SwapClaimBody body = 2;
  // The epoch duration of the chain when the swap claim took place.
  uint64 epoch_duration = 7;
}

// Encapsulates the authorized fields of the SwapClaim action, used in signing.
message SwapClaimBody {
  // The nullifier for the Swap commitment to be consumed.
  crypto.v1alpha1.Nullifier nullifier = 1;
  // The fee allows `SwapClaim` without an additional `Spend`.
  crypto.v1alpha1.Fee fee = 2;
  // Note output for asset 1.
  crypto.v1alpha1.StateCommitment output_1_commitment = 3;
  // Note output for asset 2.
  crypto.v1alpha1.StateCommitment output_2_commitment = 4;
  // Input and output amounts, and asset IDs for the assets in the swap.
  BatchSwapOutputData output_data = 6;
}

// The authorized data of a Swap transaction.
message SwapBody {
  // The trading pair to swap.
  TradingPair trading_pair = 1;
  // The amount for asset 1.
  crypto.v1alpha1.Amount delta_1_i = 2;
  // The amount for asset 2.
  crypto.v1alpha1.Amount delta_2_i = 3;
  // A commitment to a prepaid fee for the future SwapClaim.
  // This is recorded separately from delta_j_i because it's shielded;
  // in the future we'll want separate commitments to each delta_j_i
  // anyways in order to prove consistency with flow encryption.
  bytes fee_commitment = 4;
  // The swap commitment and encryption of the swap data.
  SwapPayload payload = 5;
}

message SwapPayload {
  crypto.v1alpha1.StateCommitment commitment = 1;
  // TODO: replace with ovk-based encryption
  bytes ephemeral_key = 2;
  bytes encrypted_swap = 3;
}

message SwapPlaintext {
  // The trading pair to swap.
  TradingPair trading_pair = 1;
  // Input amount of asset 1
  crypto.v1alpha1.Amount delta_1_i = 2;
  // Input amount of asset 2
  crypto.v1alpha1.Amount delta_2_i = 3;
  // Pre-paid fee to claim the swap
  crypto.v1alpha1.Fee claim_fee = 4;
  // Address that will claim the swap outputs via SwapClaim.
  crypto.v1alpha1.Address claim_address = 5;
  // Swap rseed (blinding factors are derived from this)
  bytes rseed = 6;
}

message MockFlowCiphertext {
  // Represents this transaction's contribution to flow's value.
  uint64 value = 1;
}

message SwapPlan {
  // The plaintext version of the swap to be performed.
  dex.v1alpha1.SwapPlaintext swap_plaintext = 1;
  // The blinding factor for the fee commitment. The fee in the SwapPlan is private to prevent linkability with the SwapClaim.
  bytes fee_blinding = 2;
  // The ephemeral secret used to encrypt the swap payload.
  bytes esk = 3;
}

message SwapClaimPlan {
  // The plaintext version of the swap to be performed.
  dex.v1alpha1.SwapPlaintext swap_plaintext = 1;
  // The position of the swap commitment.
  uint64 position = 2;
  // Input and output amounts for the Swap.
  dex.v1alpha1.BatchSwapOutputData output_data = 3;
  // The epoch duration, used in proving.
  uint64 epoch_duration = 4;
}

message SwapView {
  message Visible {
    dex.v1alpha1.Swap swap = 1;
    dex.v1alpha1.SwapPlaintext swap_plaintext = 3;
  }

  message Opaque {
    dex.v1alpha1.Swap swap = 1;
  }

  oneof swap_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

message SwapClaimView {
  message Visible {
    dex.v1alpha1.SwapClaim swap_claim = 1;
    crypto.v1alpha1.Note output_1 = 2;
    crypto.v1alpha1.Note output_2 = 3;
  }
  message Opaque { 
    dex.v1alpha1.SwapClaim swap_claim = 1;
  }
  oneof swap_claim_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

// Holds two asset IDs. Ordering doesn't reflect trading direction. Instead, we
// require `asset_1 < asset_2` as field elements, to ensure a canonical
// representation of an unordered pair.
message TradingPair {
  // The first asset of the pair.
  crypto.v1alpha1.AssetId asset_1 = 1;
  // The second asset of the pair.
  crypto.v1alpha1.AssetId asset_2 = 2;
}

// Encodes a trading pair starting from asset `start`
// and ending on asset `end`.
message DirectedTradingPair {
  // The start asset of the pair.
  crypto.v1alpha1.AssetId start = 1;
  // The end asset of the pair.
  crypto.v1alpha1.AssetId end = 2;
}

// Records the result of a batch swap on-chain.
//
// Used as a public input to a swap claim proof, as it implies the effective
// clearing price for the batch.
message BatchSwapOutputData {
  // The total amount of asset 1 that was input to the batch swap.
  uint64 delta_1 = 1;
  // The total amount of asset 2 that was input to the batch swap.
  uint64 delta_2 = 2;
  // The total amount of asset 1 that was output from the batch swap.
  uint64 lambda_1 = 3;
  // The total amount of asset 2 that was output from the batch swap.
  uint64 lambda_2 = 4;
  // Whether the swap succeeded or not.
  bool success = 5;
  // The height for which the batch swap data is valid.
  uint64 height = 6;
  // The trading pair associated with the batch swap.
  TradingPair trading_pair = 7;
}

// The trading function for a specific pair.
// For a pair (asset_1, asset_2), a trading function is defined by:
// `phi(R) = p*R_1 + q*R_2` and `gamma = 1 - fee`.
// The trading function is frequently referred to as "phi".
message TradingFunction {
  BareTradingFunction component = 1;
  TradingPair pair = 2;
}

// The minimum amount of data describing a trading function.
//
// This implicitly treats the trading function as being between assets 1 and 2,
// without specifying what those assets are, to avoid duplicating data (each
// asset ID alone is twice the size of the trading function).
message BareTradingFunction {
  uint32 fee = 1;
  // This is not actually an amount, it's an integer the same width as an amount
  crypto.v1alpha1.Amount p = 2;
  // This is not actually an amount, it's an integer the same width as an amount
  crypto.v1alpha1.Amount q = 3;
}

// The reserves of a position.
//
// Like a position, this implicitly treats the trading function as being
// between assets 1 and 2, without specifying what those assets are, to avoid
// duplicating data (each asset ID alone is four times the size of the
// reserves).
message Reserves {
  crypto.v1alpha1.Amount r1 = 1;
  crypto.v1alpha1.Amount r2 = 2;
}

// Data identifying a position.
message Position {
  TradingFunction phi = 1;
  // A random value used to disambiguate different positions with the exact same
  // trading function.  The chain should reject newly created positions with the
  // same nonce as an existing position.  This ensures that `PositionId`s will
  // be unique, and allows us to track position ownership with a
  // sequence of stateful NFTs based on the `PositionId`.
  bytes nonce = 2;
}

// A hash of a `Position`.
message PositionId {
  bytes inner = 1;
}

// The state of a position.
message PositionState {
  enum PositionStateEnum {
    POSITION_STATE_ENUM_UNSPECIFIED = 0;
    // The position has been opened, is active, has reserves and accumulated
    // fees, and can be traded against.
    POSITION_STATE_ENUM_OPENED = 1;
    // The position has been closed, is inactive and can no longer be traded
    // against, but still has reserves and accumulated fees.
    POSITION_STATE_ENUM_CLOSED = 2;
    // The final reserves and accumulated fees have been withdrawn, leaving an
    // empty, inactive position awaiting (possible) retroactive rewards.
    POSITION_STATE_ENUM_WITHDRAWN = 3;
    // Any retroactive rewards have been claimed. The position is now an inert,
    // historical artefact.
    POSITION_STATE_ENUM_CLAIMED = 4;
  }
  PositionStateEnum state = 1;
}

// The data recorded about a position on-chain.
message PositionMetadata {
  Position position = 1;
  PositionState state = 2;
  Reserves reserves = 3;
}

// An LPNFT tracking both ownership and state of a position.
//
// Tracking the state as part of the LPNFT means that all LP-related actions can
// be authorized by spending funds: a state transition (e.g., closing a
// position) is modeled as spending an "open position LPNFT" and minting a
// "closed position LPNFT" for the same (globally unique) position ID.
//
// This means that the LP mechanics can be agnostic to the mechanism used to
// record custody and spend authorization.  For instance, they can be recorded
// in the shielded pool, where custody is based on off-chain keys, or they could
// be recorded in a programmatic on-chain account (in the future, e.g., to
// support interchain accounts).  This also means that LP-related actions don't
// require any cryptographic implementation (proofs, signatures, etc), other
// than hooking into the value commitment mechanism used for transaction
// balances.
message LpNft {
  PositionId position_id = 1;
  PositionState state = 2;
}

// A transaction action that opens a new position.
//
// This action's contribution to the transaction's value balance is to consume
// the initial reserves and contribute an opened position NFT.
message PositionOpen {
  // Contains the data defining the position, sufficient to compute its `PositionId`.
  //
  // Positions are immutable, so the `PositionData` (and hence the `PositionId`)
  // are unchanged over the entire lifetime of the position.
  Position position = 1;
  // The initial reserves of the position.  Unlike the `PositionData`, the
  // reserves evolve over time as trades are executed against the position.
  Reserves initial_reserves = 2;
}

// A transaction action that closes a position.
//
// This action's contribution to the transaction's value balance is to consume
// an opened position NFT and contribute a closed position NFT.
//
// Closing a position does not immediately withdraw funds, because Penumbra
// transactions (like any ZK transaction model) are early-binding: the prover
// must know the state transition they prove knowledge of, and they cannot know
// the final reserves with certainty until after the position has been deactivated.
message PositionClose {
  PositionId position_id = 1;
}

// A transaction action that withdraws funds from a closed position.
//
// This action's contribution to the transaction's value balance is to consume a
// closed position NFT and contribute a withdrawn position NFT, as well as all
// of the funds that were in the position at the time of closing.
message PositionWithdraw {
  PositionId position_id = 1;
  // A transparent (zero blinding factor) commitment to the position's final reserves and fees.
  //
  // The chain will check this commitment by recomputing it with the on-chain state.
  crypto.v1alpha1.BalanceCommitment reserves_commitment = 2;
}

// A transaction action that claims retroactive rewards for a historical
// position.
//
// This action's contribution to the transaction's value balance is to consume a
// withdrawn position NFT and contribute its reward balance.
message PositionRewardClaim {
  PositionId position_id = 1;
  // A transparent (zero blinding factor) commitment to the position's accumulated rewards.
  //
  // The chain will check this commitment by recomputing it with the on-chain state.
  crypto.v1alpha1.BalanceCommitment rewards_commitment = 2;
}

// Contains a path for a trade, including the trading pair (with direction), the trading
// function defining their relationship, and the route taken between the two assets.
message Path {
    DirectedTradingPair pair = 1;
    repeated crypto.v1alpha1.AssetId route = 2;
    TradingFunction phi = 3;
}

// A path and the amount of the assets on either side that were traded.
message Trade {
  // The path taken by the trade.
  Path path = 1;
  // The amount of the start asset being traded.
  crypto.v1alpha1.Amount start_amount = 2;
  // The amount of end asset being received.
  crypto.v1alpha1.Amount end_amount = 3;
}

// Contains the entire execution of a particular swap.
message SwapExecution {
  repeated Trade trades = 1;
}