syntax = "proto3";
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

package penumbra.core.transaction.v1alpha1;

import "penumbra/core/crypto/v1alpha1/crypto.proto";
import "penumbra/core/stake/v1alpha1/stake.proto";
import "penumbra/core/ibc/v1alpha1/ibc.proto";
import "penumbra/core/dex/v1alpha1/dex.proto";
import "penumbra/core/governance/v1alpha1/governance.proto";

// A Penumbra transaction.
message Transaction {
  TransactionBody body = 1;
  // The binding signature is stored separately from the transaction body that it signs.
  bytes binding_sig = 2;
  // The root of some previous state of the state commitment tree, used as an anchor for all
  // ZK state transition proofs.
  crypto.v1alpha1.MerkleRoot anchor = 3;
}

// The body of a transaction.
message TransactionBody {
  // A list of actions (state changes) performed by this transaction.
  repeated Action actions = 1;
  // The maximum height that this transaction can be included in the chain.
  //
  // If zero, there is no maximum.
  uint64 expiry_height = 2;
  // The chain this transaction is intended for.  Including this prevents
  // replaying a transaction on one chain onto a different chain.
  string chain_id = 3;
  // The transaction fee.
  crypto.v1alpha1.Fee fee = 4;
  // A list of clues for use with Fuzzy Message Detection.
  repeated crypto.v1alpha1.Clue fmd_clues = 5;
  // An optional encrypted memo. It will only be populated if there are
  // outputs in the actions of this transaction. 528 bytes.
  optional bytes encrypted_memo = 6;
}

// A state change performed by a transaction.
message Action {
  oneof action {
    Spend spend = 1;
    Output output = 2;
    dex.v1alpha1.Swap swap = 3;
    dex.v1alpha1.SwapClaim swap_claim = 4;

    // Uncommon actions have numbers > 15.

    stake.v1alpha1.ValidatorDefinition validator_definition = 16;
    ibc.v1alpha1.IbcAction ibc_action = 17;

    // Governance:
    governance.v1alpha1.ProposalSubmit proposal_submit = 18;
    governance.v1alpha1.ProposalWithdraw proposal_withdraw = 19;
    governance.v1alpha1.ValidatorVote validator_vote = 20;
    // DelegatorVote delegator_vote = 21;
    governance.v1alpha1.ProposalDepositClaim proposal_deposit_claim = 22;

    dex.v1alpha1.PositionOpen position_open = 30;
    dex.v1alpha1.PositionClose position_close = 31;
    dex.v1alpha1.PositionWithdraw position_withdraw = 32;
    dex.v1alpha1.PositionRewardClaim position_reward_claim = 34;

    // (un)delegation
    stake.v1alpha1.Delegate delegate = 40;
    stake.v1alpha1.Undelegate undelegate = 41;
    stake.v1alpha1.UndelegateClaim undelegate_claim = 42;

    ibc.v1alpha1.Ics20Withdrawal ics20_withdrawal = 200;

  }
}

message TransactionPerspective {
  repeated PayloadKeyWithCommitment payload_keys = 1;
  repeated NullifierWithNote spend_nullifiers = 2;
  // The openings of note commitments referred to in the transaction
  // but not included in the transaction.
  repeated crypto.v1alpha1.Note advice_notes = 3;
}

message PayloadKeyWithCommitment {
  bytes payload_key = 1;
  crypto.v1alpha1.StateCommitment commitment = 2;
}

message NullifierWithNote {
  crypto.v1alpha1.Nullifier nullifier = 1;
  crypto.v1alpha1.Note note = 2;
}

message TransactionView {
  // A list views into of actions (state changes) performed by this transaction.
  repeated ActionView action_views = 1;
  // The maximum height that this transaction can be included in the chain.
  //
  // If zero, there is no maximum.
  uint64 expiry_height = 2;
  // The chain this transaction is intended for.  Including this prevents
  // replaying a transaction on one chain onto a different chain.
  string chain_id = 3;
  // The transaction fee.
  crypto.v1alpha1.Fee fee = 4;
  // A list of clues for use with Fuzzy Message Detection.
  repeated crypto.v1alpha1.Clue fmd_clues = 5;
  // An optional plaintext memo. It will only be populated if there are
  // outputs in the actions of this transaction.
  optional string memo = 6;
}

// A view of a specific state change action performed by a transaction.
message ActionView {
  oneof action_view {
    // Action types with visible/opaque variants
    SpendView spend = 1;
    OutputView output = 2;
    dex.v1alpha1.SwapView swap = 3;
    dex.v1alpha1.SwapClaimView swap_claim = 4;
    // Action types without visible/opaque variants
    stake.v1alpha1.ValidatorDefinition validator_definition = 16;
    ibc.v1alpha1.IbcAction ibc_action = 17;
    // Governance:
    governance.v1alpha1.ProposalSubmit proposal_submit = 18;
    governance.v1alpha1.ProposalWithdraw proposal_withdraw = 19;
    governance.v1alpha1.ValidatorVote validator_vote = 20;
    governance.v1alpha1.ProposalDepositClaim proposal_deposit_claim = 22;
    // DelegatorVote delegator_vote = 21;
    dex.v1alpha1.PositionOpen position_open = 30;
    dex.v1alpha1.PositionClose position_close = 31;
    dex.v1alpha1.PositionWithdraw position_withdraw = 32;
    dex.v1alpha1.PositionRewardClaim position_reward_claim = 34;
    stake.v1alpha1.Delegate delegate = 41;
    stake.v1alpha1.Undelegate undelegate = 42;
    // TODO: we have no way to recover the opening of the undelegate_claim's
    // balance commitment, and can only infer the value from looking at the rest
    // of the transaction. is that fine?
    stake.v1alpha1.UndelegateClaim undelegate_claim = 43;
    ibc.v1alpha1.Ics20Withdrawal ics20_withdrawal = 200;

  }
}

message SpendView {
  message Visible {
    Spend spend = 1;
    crypto.v1alpha1.Note note = 2;
  }
  message Opaque {
    Spend spend = 1;
  }
  oneof spend_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

message OutputView {
  message Visible {
    Output output = 1;
    crypto.v1alpha1.Note note = 2;
    bytes payload_key = 3;
  }

  message Opaque {
    Output output = 1;
  }
  oneof output_view {
    Visible visible = 1;
    Opaque opaque = 2;
  }
}

// Spends a shielded note.
message Spend {
  // The effecting data of the spend.
  SpendBody body = 1;
  // The authorizing signature for the spend.
  crypto.v1alpha1.SpendAuthSignature auth_sig = 2;
  // The proof that the spend is well-formed is authorizing data.
  bytes proof = 3;
}

// The body of a spend description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
message SpendBody {
  // A commitment to the value of the input note.
  crypto.v1alpha1.BalanceCommitment balance_commitment = 1;
  // The nullifier of the input note.
  bytes nullifier = 3;
  // The randomized validating key for the spend authorization signature.
  bytes rk = 4;
}

// Creates a new shielded note.
message Output {
  // The effecting data for the output.
  OutputBody body = 1;
  // The output proof is authorizing data.
  crypto.v1alpha1.ZKOutputProof proof = 2;
}

// The body of an output description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
message OutputBody {
  // The minimal data required to scan and process the new output note.
  crypto.v1alpha1.EncryptedNote note_payload = 1;
  // A commitment to the value of the output note. 32 bytes.
  crypto.v1alpha1.BalanceCommitment balance_commitment = 2;
  // An encrypted key for decrypting the memo.
  bytes wrapped_memo_key = 3;
  // The key material used for note encryption, wrapped in encryption to the
  // sender's outgoing viewing key. 80 bytes.
  bytes ovk_wrapped_key = 4;
}

// The data required to authorize a transaction plan.
message AuthorizationData {
    // The computed auth hash for the approved transaction plan.
    crypto.v1alpha1.EffectHash effect_hash = 1;
    // The required spend authorizations, returned in the same order as the
    // Spend actions in the original request.
    repeated crypto.v1alpha1.SpendAuthSignature spend_auths = 2;
}

// The data required for proving when building a transaction from a plan.
message WitnessData {
  // The anchor for the state transition proofs.
  crypto.v1alpha1.MerkleRoot anchor = 1;
  // The auth paths for the notes the transaction spends, in the
  // same order as the spends in the transaction plan.
  repeated crypto.v1alpha1.StateCommitmentProof state_commitment_proofs = 2;
}

// Describes a planned transaction.
message TransactionPlan {
    repeated ActionPlan actions = 1;
    uint64 expiry_height = 2;
    string chain_id = 3;
    crypto.v1alpha1.Fee fee = 4;
    repeated CluePlan clue_plans = 5;
    MemoPlan memo_plan = 6;
}

// Describes a planned transaction action.
//
// Some transaction Actions don't have any private data and are treated as being plans
// themselves.
message ActionPlan {
    oneof action {
        SpendPlan spend = 1;
        OutputPlan output = 2;
        dex.v1alpha1.SwapPlan swap = 3;
        dex.v1alpha1.SwapClaimPlan swap_claim = 4;

        // This is just a message relayed to the chain.
        stake.v1alpha1.ValidatorDefinition validator_definition = 16;
        // This is just a message relayed to the chain.
        ibc.v1alpha1.IbcAction ibc_action = 17;
        // Governance:
        governance.v1alpha1.ProposalSubmit proposal_submit = 18;
        governance.v1alpha1.ProposalWithdraw proposal_withdraw = 19;
        governance.v1alpha1.ValidatorVote validator_vote = 20;
        governance.v1alpha1.DelegatorVotePlan delegator_vote = 21;
        governance.v1alpha1.ProposalDepositClaim proposal_deposit_claim = 22;

        dex.v1alpha1.PositionOpen position_open = 30;
        dex.v1alpha1.PositionClose position_close = 31;
        dex.v1alpha1.PositionWithdraw position_withdraw = 32;
        dex.v1alpha1.PositionRewardClaim position_reward_claim = 34;

        // We don't need any extra information (yet) to understand delegations,
        // because we don't yet use flow encryption.
        stake.v1alpha1.Delegate delegate = 40;
        // We don't need any extra information (yet) to understand undelegations,
        // because we don't yet use flow encryption.
        stake.v1alpha1.Undelegate undelegate = 41;
        stake.v1alpha1.UndelegateClaimPlan undelegate_claim = 42;
    }
}

// Describes a plan for forming a `Clue`.
message CluePlan {
  // The address.
  crypto.v1alpha1.Address address = 1;
  // The random seed to use for the clue plan.
  bytes rseed = 2;
  // The bits of precision.
  uint64 precision_bits = 3;
}

// Describes a plan for forming a `Memo`.
message MemoPlan {
  // The plaintext.
  bytes plaintext = 1;
  // The key to use to encrypt the memo.
  bytes key = 2;
}

message SpendPlan {
    // The plaintext note we plan to spend.
    crypto.v1alpha1.Note note = 1;
    // The position of the note we plan to spend.
    uint64 position = 2;
    // The randomizer to use for the spend.
    bytes randomizer = 3;
    // The blinding factor to use for the value commitment.
    bytes value_blinding = 4;
}

message OutputPlan {
    // The value to send to this output.
    crypto.v1alpha1.Value value = 1;
    // The destination address to send it to.
    crypto.v1alpha1.Address dest_address = 2;
    // The rseed to use for the new note.
    bytes rseed = 3;
    // The blinding factor to use for the value commitment.
    bytes value_blinding = 4;
}